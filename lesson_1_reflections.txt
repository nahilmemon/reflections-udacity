How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It helped to quickly spot the differences between the two files, which is where bug most likely was introduced.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    If you have easy access to the older versions of your files, then it's easy to undo a change, review a past edit, or revert your file back to the last working state in case things go wrong.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros:
      - You can choose to save at logical points according to the changes made.
      - By choosing when to save, you can avoid cluttering your save history, so that it's easy to find particular changes when necessary.
    Cons:
      - You might forget to save every so often.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    It depends on why that particular program is being used. Git is typically used for code, and often while coding, you tend to have many interrelated code files.
    Other programs, like Google Docs, treats each file separately because the user usually makes and uses files separately and that have no relationship or interdependencies with each other.

How can you use the commands git log and git diff to view the history of files?

    git log lets you see all the commits you've ever made (including the ID, the author of the commit, the date of the commit, and the commit message).
    git log --stat does the above, but it also lets you see how many insertions and deletions have been made to each file in the repository.
    git diff lets you compare 2 different commits and see how many insertions and deletions have been and also which lines have been added or deleted.

How might using version control make you more confident to make changes that
could break something?

    Since I know that I can always return back to a previously working condition, I'll become more confident in making radical changes that may break the code.

Now that you have your workspace set up, what do you want to try using Git for?

    I want to use Git for version control while I'm working on coding projects, so that I can keep track of all the changes that I make and easily revert back to an older state of the code in case things go wrong or if I want to track when a bug appeared.